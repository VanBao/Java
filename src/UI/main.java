package UI;

import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;

import java.io.File;
import java.io.FileReader;

import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;

import javax.swing.UIManager;

import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author LE BAO
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    private String algorithm;

    private int elements;

    private int speed;

    private int order;

    private Integer[] values;

    private final String SELECTION_SORT = "select";

    private final String HEAP_SORT = "heap";

    private final String INSERTION_SORT = "insert";

    private final String QUICK_SORT = "quick";

    private final String MERGE_SORT = "merge";

    private final String SHELL_SORT = "shell";

    private final String BUBBLE_SORT = "bubble";

    private final int ASCENDING = 1;

    private final int DESCENDING = 2;

    private boolean isRandom = false;

    private boolean isLoaded = false;
    
    private boolean isEntered = false;

    public main() {

        this.algorithm = "";

        this.elements = 0;

        this.speed = 50 * 5;

        this.order = 0;

        this.values = null;

        initComponents();

        try {
            
            Image image = ImageIO.read(getClass().getResource("/Images/icon.png"));

            this.setIconImage(image);

        } catch (IOException ex) {

            JOptionPane.showMessageDialog(null, "Hello: " + ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);

        }

        try {

            Image img = ImageIO.read(getClass().getResource("/Images/loading.png"));

            img = img.getScaledInstance(30, 25, java.awt.Image.SCALE_SMOOTH);

            jButtonLoadingFile.setIcon(new ImageIcon(img));

            Image img1 = ImageIO.read(getClass().getResource("/Images/random.jpg"));

            img1 = img1.getScaledInstance(30, 25, java.awt.Image.SCALE_SMOOTH);

            jButtonRandomize.setIcon(new ImageIcon(img1));

            Image img2 = ImageIO.read(getClass().getResource("/Images/setting.png"));

            img2 = img2.getScaledInstance(30, 25, java.awt.Image.SCALE_SMOOTH);

            jButtonSettingValue.setIcon(new ImageIcon(img2));

            Image img3 = ImageIO.read(getClass().getResource("/Images/executing.png"));

            img3 = img3.getScaledInstance(30, 25, java.awt.Image.SCALE_SMOOTH);

            jButtonExecuting.setIcon(new ImageIcon(img3));

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(null, "Hi1:" + ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaData = new javax.swing.JTextArea();
        jButtonRandomize = new javax.swing.JButton();
        jButtonLoadingFile = new javax.swing.JButton();
        jComboBoxQuantity = new javax.swing.JComboBox();
        jButtonSettingValue = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jRadioButtonAscending = new javax.swing.JRadioButton();
        jRadioButtonDescending = new javax.swing.JRadioButton();
        jSliderSpeed = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxAlgorithm = new javax.swing.JComboBox();
        jButtonExecuting = new javax.swing.JButton();
        jPanelCode = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaCode = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabelAlgorithmName = new javax.swing.JLabel();
        jLabelWorstCase = new javax.swing.JLabel();
        jLabelBestCase = new javax.swing.JLabel();
        jLabelAverage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sort Algorithm Simulator");
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(200, 10));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 255), null), "Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        jPanel1.setToolTipText("");
        jPanel1.setName(""); // NOI18N

        jTextAreaData.setColumns(20);
        jTextAreaData.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextAreaData.setLineWrap(true);
        jTextAreaData.setRows(5);
        jTextAreaData.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaData);

        jButtonRandomize.setBackground(new java.awt.Color(51, 153, 255));
        jButtonRandomize.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonRandomize.setToolTipText("");
        jButtonRandomize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRandomize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRandomizeActionPerformed(evt);
            }
        });

        jButtonLoadingFile.setBackground(new java.awt.Color(51, 153, 255));
        jButtonLoadingFile.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonLoadingFile.setToolTipText("");
        jButtonLoadingFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonLoadingFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadingFileActionPerformed(evt);
            }
        });

        jComboBoxQuantity.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jComboBoxQuantity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quantity", "5", "10", "15", "20", "25", "30", "35", "40" }));
        jComboBoxQuantity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxQuantityItemStateChanged(evt);
            }
        });

        jButtonSettingValue.setBackground(new java.awt.Color(51, 153, 255));
        jButtonSettingValue.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonSettingValue.setToolTipText("");
        jButtonSettingValue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSettingValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBoxQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonSettingValue, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonRandomize, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonLoadingFile, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxQuantity, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSettingValue)
                        .addComponent(jButtonRandomize)
                        .addComponent(jButtonLoadingFile)))
                .addGap(40, 40, 40))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 255), null), "Order and Speed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        buttonGroup1.add(jRadioButtonAscending);
        jRadioButtonAscending.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonAscending.setText("Ascending");
        jRadioButtonAscending.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        buttonGroup1.add(jRadioButtonDescending);
        jRadioButtonDescending.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonDescending.setText("Descending");
        jRadioButtonDescending.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jSliderSpeed.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jSliderSpeed.setMajorTickSpacing(20);
        jSliderSpeed.setMinorTickSpacing(5);
        jSliderSpeed.setOrientation(javax.swing.JSlider.VERTICAL);
        jSliderSpeed.setPaintLabels(true);
        jSliderSpeed.setPaintTicks(true);
        jSliderSpeed.setSnapToTicks(true);
        jSliderSpeed.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jSliderSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderSpeedStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonAscending)
                    .addComponent(jRadioButtonDescending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(jSliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jRadioButtonAscending)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonDescending)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSliderSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 255), null), "Algorithm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jComboBoxAlgorithm.setBackground(new java.awt.Color(102, 153, 255));
        jComboBoxAlgorithm.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jComboBoxAlgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Algorithm", "Selection Sort", "Insertion Sort", "Quick Sort", "Merge Sort", "Heap Sort", "Bubble Sort" }));
        jComboBoxAlgorithm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBoxAlgorithm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxAlgorithmItemStateChanged(evt);
            }
        });

        jButtonExecuting.setBackground(new java.awt.Color(51, 153, 255));
        jButtonExecuting.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonExecuting.setToolTipText("");
        jButtonExecuting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonExecuting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExecuting, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jComboBoxAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButtonExecuting)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelCode.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 255), null), "Code", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N
        jPanelCode.setToolTipText("");

        jTextAreaCode.setEditable(false);
        jTextAreaCode.setColumns(20);
        jTextAreaCode.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jTextAreaCode.setLineWrap(true);
        jTextAreaCode.setRows(5);
        jTextAreaCode.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextAreaCode);

        javax.swing.GroupLayout jPanelCodeLayout = new javax.swing.GroupLayout(jPanelCode);
        jPanelCode.setLayout(jPanelCodeLayout);
        jPanelCodeLayout.setHorizontalGroup(
            jPanelCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );
        jPanelCodeLayout.setVerticalGroup(
            jPanelCodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 153, 255), null), "Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 14))); // NOI18N

        jLabelAlgorithmName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelAlgorithmName.setText("Name:");
        jLabelAlgorithmName.setToolTipText("");

        jLabelWorstCase.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelWorstCase.setText("Worst-case:");
        jLabelWorstCase.setToolTipText("");

        jLabelBestCase.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelBestCase.setText("Best-case:");
        jLabelBestCase.setToolTipText("");

        jLabelAverage.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelAverage.setText("Average:");
        jLabelAverage.setToolTipText("");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabelWorstCase)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAlgorithmName)
                            .addComponent(jLabelBestCase)
                            .addComponent(jLabelAverage))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabelAlgorithmName)
                .addGap(20, 20, 20)
                .addComponent(jLabelBestCase)
                .addGap(20, 20, 20)
                .addComponent(jLabelAverage)
                .addGap(20, 20, 20)
                .addComponent(jLabelWorstCase)
                .addContainerGap(242, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(20, 20, 20)
                        .addComponent(jPanelCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        jPanel1.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadingFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadingFileActionPerformed
        // TODO add your handling code here:

        loadFile();

    }//GEN-LAST:event_jButtonLoadingFileActionPerformed

    private void loadFile() {

        JFileChooser chooser = new JFileChooser("C:\\Users\\LE BAO\\Desktop");

        chooser.setDialogTitle("Loading data");

        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.txt", "txt");

        chooser.setFileFilter(filter);

        int choice = chooser.showOpenDialog(this);

        if (choice == JFileChooser.APPROVE_OPTION) {

            StringBuilder stringBuilder = new StringBuilder();

            try {

                File file = chooser.getSelectedFile();

                FileReader fileWriter = new FileReader(file);

                BufferedReader bufferedReader = new BufferedReader(fileWriter);

                String line = null;

                while ((line = bufferedReader.readLine()) != null) {

                    stringBuilder.append(line);

                }

                fileWriter.close();

                bufferedReader.close();

            } catch (Exception ex) {

                JOptionPane.showMessageDialog(null, "The selected file does not exist", "Warning", JOptionPane.WARNING_MESSAGE);

                return;

            }

            isRandom = false;

            isLoaded = true;
            
            isEntered = false;

            String data = stringBuilder.toString();

            if (checkLoadingValue(data) == false) {

                return;

            }

            String[] arr = data.split(",");

            for (int i = 0; i < values.length; i++) {

                values[i] = new Integer(Integer.parseInt(arr[i]));

            }

            jTextAreaData.setText(data);

        }

    }
    private void jButtonExecutingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutingActionPerformed
        // TODO add your handling code here:
        StringBuilder error = new StringBuilder();

        if (elements != 0) {

            if (values[0] == null) {

                error.append("You haven't entered any integer value yet.\n");

            }

        }

        if (elements == 0) {

            error.append("You haven't set number of elements yet.\n");

        }

        if (algorithm.equalsIgnoreCase("") == true) {

            error.append("You haven't chosen the sort algorithm yet.\n");

        }

        if (jRadioButtonAscending.isSelected() == false & jRadioButtonDescending.isSelected() == false) {

            error.append("You haven't set the order of sorting yet.\n");

        }

        if (!error.toString().toString().equalsIgnoreCase("")) {

            JOptionPane.showMessageDialog(null, error.toString(), "Warning", JOptionPane.WARNING_MESSAGE);

            return;

        }

        setOrder();

        if(!main2.isExisted){
            
            main2 n = new main2(this.algorithm, this.speed, order, this.copyData());

            n.initital();
            
        }
    
    }//GEN-LAST:event_jButtonExecutingActionPerformed

    private Integer[] copyData(){
        
        Integer[] duplicate = new Integer[this.elements];
        
        for(int i = 0; i < this.elements; i++){
            
            duplicate[i] = this.values[i];
            
        }
        
        return duplicate;
        
    }
    private boolean checkDataText(String[] data) {

        for (int i = 0; i < data.length; i++) {

            if (data[i].matches("^[0-9]*$") && data[i].length() >= 1) {
                ;

            } else {

                return false;

            }

        }

        return true;

    }
    private void jComboBoxAlgorithmItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxAlgorithmItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            int index = jComboBoxAlgorithm.getSelectedIndex();

            switch (index) {

                case 1:

                    algorithm = SELECTION_SORT;

                    displayCode(1);

                    displayInformation(1);

                    break;

                case 2:

                    algorithm = this.INSERTION_SORT;

                    displayCode(2);

                    displayInformation(2);

                    break;

                case 3:

                    algorithm = this.QUICK_SORT;

                    displayCode(3);

                    displayInformation(3);

                    break;

                case 4:

                    algorithm = this.MERGE_SORT;

                    displayCode(4);

                    displayInformation(4);

                    break;

                case 5:

                    algorithm = this.HEAP_SORT;

                    displayCode(5);

                    displayInformation(5);

                    break;

                case 6:

                    algorithm = this.BUBBLE_SORT;

                    displayCode(6);

                    displayInformation(6);

                    break;

                default:

                    this.algorithm = "";

                    jTextAreaCode.setText("");

            }

        }

    }//GEN-LAST:event_jComboBoxAlgorithmItemStateChanged

    private void jSliderSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderSpeedStateChanged
        // TODO add your handling code here:

        if (jSliderSpeed.getValueIsAdjusting()) {

            return;

        }

        this.speed = jSliderSpeed.getValue() * 3;
        
    }//GEN-LAST:event_jSliderSpeedStateChanged

    private void jComboBoxQuantityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxQuantityItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            
            if(jComboBoxQuantity.getSelectedItem().toString().equalsIgnoreCase("quantity")){
                
                elements = 0;
                
                values = null;
                
                jTextAreaData.setText("");
                
                return;
            }

            elements = Integer.parseInt(jComboBoxQuantity.getSelectedItem().toString());

            values = new Integer[elements];

            if (isLoaded) {

                jTextAreaData.setText("");

            }

            if (isRandom) {

                random();

            }
            
            if(isEntered){
                
                jTextAreaData.setText("");
                
            }

        }

    }//GEN-LAST:event_jComboBoxQuantityItemStateChanged

    private void random() {

        StringBuilder data = new StringBuilder();

        for (int i = 0; i < values.length; i++) {

            values[i] = new Integer((int) (Math.random() * 200));

            if (i != (values.length - 1)) {

                data.append("" + values[i] + ",");

            } else {

                data.append("" + values[i]);

            }

        }

        jTextAreaData.setText(data.toString());

    }
    private void jButtonRandomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRandomizeActionPerformed
        // TODO add your handling code here:

        if (elements == 0) {

            JOptionPane.showMessageDialog(null, "You haven't set number of elements yet", "Warning", JOptionPane.WARNING_MESSAGE);

            return;

        }

        isRandom = true;

        isLoaded = false;
        
        isEntered = false;

        random();


    }//GEN-LAST:event_jButtonRandomizeActionPerformed

    private boolean checkLoadingValue(String data) {

        StringBuilder error = new StringBuilder();

        if (elements == 0) {

            error.append("You haven't set number of elements yet.\n");

        }

        String[] arr = data.split(",");

        if (data.isEmpty()) {

            error.append("The loaded file is empty.\n");

        }

        if (data.isEmpty() == false && (arr.length != elements || checkDataText(arr) == false || data.matches("[0-9, /,]+") == false)) {

            error.append("The loaded data is invalid.\n");

        }

        if (!error.toString().equalsIgnoreCase("")) {

            JOptionPane.showMessageDialog(null, error.toString(), "Warning", JOptionPane.WARNING_MESSAGE);

            return false;

        }

        return true;
    }

    private boolean checkSettingValue(String data) {

        StringBuilder error = new StringBuilder();

        if (elements == 0) {

            error.append("You haven't set number of elements yet.\n");

        }

        String[] arr = data.split(",");

        if (data.isEmpty()) {

            error.append("You haven't entered any integer value yet.\n");

        }

        if (data.isEmpty() == false && (arr.length != elements || checkDataText(arr) == false || data.matches("[0-9, /,]+") == false)) {

            error.append("The entered data is invalid.\n");

        }

        if (!error.toString().equalsIgnoreCase("")) {

            JOptionPane.showMessageDialog(null, error.toString(), "Warning", JOptionPane.WARNING_MESSAGE);

            return false;

        }

        return true;
    }
    private void jButtonSettingValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingValueActionPerformed
        // TODO add your handling code here:

        String value = jTextAreaData.getText();

        if (checkSettingValue(value) == false) {

            return;

        }

        isRandom = false;

        isLoaded = false;
        
        isEntered = true;

        String[] arr = value.split(",");

        for (int i = 0; i < values.length; i++) {

            values[i] = new Integer(Integer.parseInt(arr[i]));

        }
        
    }//GEN-LAST:event_jButtonSettingValueActionPerformed

    private void setOrder() {

        if (jRadioButtonAscending.isSelected()) {

            order = ASCENDING;

        }
        if (jRadioButtonDescending.isSelected()) {

            order = DESCENDING;

        }
    }

    private void displayInformation(int algorithm) {

        switch (algorithm) {

            case 1:

                jLabelAlgorithmName.setText("Name: Selection Sort");

                jLabelBestCase.setText("<html>Best case: O(n<sup>2</sup>)</html>");

                jLabelAverage.setText("<html>Average: O(n<sup>2</sup>)</html>");

                jLabelWorstCase.setText("<html>Worst case: O(n<sup>2</sup>)</html>");

                break;

            case 2:

                jLabelAlgorithmName.setText("Name: Insertion Sort");

                jLabelBestCase.setText("<html>Best case: O(n)</html>");

                jLabelAverage.setText("<html>Average: O(n<sup>2</sup>)</html>");

                jLabelWorstCase.setText("<html>Worst case: O(n<sup>2</sup>)</html>");

                break;

            case 3:

                jLabelAlgorithmName.setText("Name: Quick Sort");

                jLabelBestCase.setText("<html>Best case: O( nlog(n) )</html>");

                jLabelAverage.setText("<html>Average: O( nlog(n) )</html>");

                jLabelWorstCase.setText("<html>Worst case: O(n<sup>2</sup>)</html>");

                break;

            case 4:

                jLabelAlgorithmName.setText("Name: Merge Sort");

                jLabelBestCase.setText("<html>Best case: O( nlog(n) )</html>");

                jLabelAverage.setText("<html>Average: O( nlog(n) )</html>");

                jLabelWorstCase.setText("<html>Worst case: O( nlog(n) )</html>");

                break;

            case 5:

                jLabelAlgorithmName.setText("Name: Heap Sort");

                jLabelBestCase.setText("<html>Best case: O( nlog(n) )</html>");

                jLabelAverage.setText("<html>Average: O( nlog(n) )</html>");

                jLabelWorstCase.setText("<html>Worst case: O( nlog(n) )</html>");

                break;

            case 6:

                jLabelAlgorithmName.setText("Name: Bubble Sort");

                jLabelBestCase.setText("<html>Best case: O(n<sup>2</sup>)</html>");

                jLabelAverage.setText("<html>Average: O(n<sup>2</sup>)</html>");

                jLabelWorstCase.setText("<html>Worst case: O(n<sup>2</sup>)</html>");

                break;

        }

    }

    private void displayCode(int algorithm) {

        switch (algorithm) {

            case 1:
                jTextAreaCode.setText("public static int[] SelectionSort(int[] arr){\n"
                        + "         \n"
                        + "        for (int i = 0; i < arr.length - 1; i++)\n"
                        + "        {\n"
                        + "            int index = i;\n"
                        + "            for (int j = i + 1; j < arr.length; j++)\n"
                        + "                if (arr[j] < arr[index]) \n"
                        + "                    index = j;\n"
                        + "      \n"
                        + "            int smallerNumber = arr[index];  \n"
                        + "            arr[index] = arr[i];\n"
                        + "            arr[i] = smallerNumber;\n"
                        + "        }\n"
                        + "    }");

                break;
            case 2:
                jTextAreaCode.setText("public static void insertionSort(int[] arr) {\n"
                        + "      int i, j, newValue;\n"
                        + "      for (i = 1; i < arr.length; i++) {\n"
                        + "            newValue = arr[i];\n"
                        + "            j = i;\n"
                        + "            while (j > 0 && arr[j - 1] > newValue) {\n"
                        + "                  arr[j] = arr[j - 1];\n"
                        + "                  j--;\n"
                        + "            }\n"
                        + "            arr[j] = newValue;\n"
                        + "      }\n"
                        + "}");
                break;
            case 3:
                jTextAreaCode.setText("public void quicksort(int low, int high) {\n"
                        + "                int i = low, j = high;\n"
                        + "                int pivot = numbers[low + (high-low)/2];\n"
                        + "                while (i <= j) {\n"
                        + "                        while (numbers[i] < pivot) {\n"
                        + "                                i++;\n"
                        + "                        }\n"
                        + "                        while (numbers[j] > pivot) {\n"
                        + "                                j--;\n"
                        + "                        }\n"
                        + "\n"
                        + "                        if (i <= j) {\n"
                        + "                                exchange(i, j);\n"
                        + "                                i++;\n"
                        + "                                j--;\n"
                        + "                        }\n"
                        + "                }\n"
                        + "                // Recursion\n"
                        + "                if (low < j)\n"
                        + "                        quicksort(low, j);\n"
                        + "                if (i < high)\n"
                        + "                        quicksort(i, high);\n"
                        + "        }\n"
                        + "\n"
                        + "        public void exchange(int i, int j) {\n"
                        + "                int temp = numbers[i];\n"
                        + "                numbers[i] = numbers[j];\n"
                        + "                numbers[j] = temp;\n"
                        + "        }\n"
                        + "}");
                break;
            case 4:
                jTextAreaCode.setText("public static void mergesort(int low, int high) {\n"
                        + "                if (low < high) {\n"
                        + "                        int middle = low + (high - low) / 2;\n"
                        + "                        mergesort(low, middle);\n"
                        + "                        mergesort(middle + 1, high);\n"
                        + "                        merge(low, middle, high);\n"
                        + "                }\n"
                        + "        }\n"
                        + "\n"
                        + "        public static void merge(int low, int middle, int high) {\n"
                        + "\n"
                        + "                for (int i = low; i <= high; i++) {\n"
                        + "                        helper[i] = numbers[i];\n"
                        + "                }\n"
                        + "\n"
                        + "                int i = low;\n"
                        + "                int j = middle + 1;\n"
                        + "                int k = low;\n"
                        + "                while (i <= middle && j <= high) {\n"
                        + "                        if (helper[i] <= helper[j]) {\n"
                        + "                                numbers[k] = helper[i];\n"
                        + "                                i++;\n"
                        + "                        } else {\n"
                        + "                                numbers[k] = helper[j];\n"
                        + "                                j++;\n"
                        + "                        }\n"
                        + "                        k++;\n"
                        + "                }\n"
                        + "                while (i <= middle) {\n"
                        + "                        numbers[k] = helper[i];\n"
                        + "                        k++;\n"
                        + "                        i++;\n"
                        + "                }\n"
                        + "\n"
                        + "        }");
                break;
            case 5:
                jTextAreaCode.setText("    public void sort(int arr[])\n"
                        + "    {\n"
                        + "        int n = arr.length;\n"
                        + " \n"
                        + "        for (int i = n / 2 - 1; i >= 0; i--)\n"
                        + "            heapify(arr, n, i);\n"
                        + "        \n"
                        + "        for (int i=n-1; i>=0; i--)\n"
                        + "        {\n"
                        + "            int temp = arr[0];\n"
                        + "            arr[0] = arr[i];\n"
                        + "            arr[i] = temp;\n"
                        + "            heapify(arr, i, 0);\n"
                        + "        }\n"
                        + "    }\n"
                        + " \n"
                        + "    void heapify(int arr[], int n, int i)\n"
                        + "    {\n"
                        + "        int largest = i; \n"
                        + "        int l = 2*i + 1; \n"
                        + "        int r = 2*i + 2;  \n"
                        + " \n"
                        + "        if (l < n && arr[l] > arr[largest])\n"
                        + "            largest = l;\n"
                        + " \n"
                        + "        if (r < n && arr[r] > arr[largest])\n"
                        + "            largest = r;\n"
                        + " \n"
                        + "        if (largest != i)\n"
                        + "        {\n"
                        + "            int swap = arr[i];\n"
                        + "            arr[i] = arr[largest];\n"
                        + "            arr[largest] = swap;\n"
                        + " \n"
                        + "            heapify(arr, n, largest);\n"
                        + "        }\n"
                        + "    }");
                break;
            case 6:
                jTextAreaCode.setText("public static void bubbleSort(int[] arr) {  \n"
                        + "        int n = arr.length;  \n"
                        + "        int temp = 0;  \n"
                        + "         for(int i=0; i < n; i++){  \n"
                        + "                 for(int j=1; j < (n-i); j++){  \n"
                        + "                          if(arr[j-1] > arr[j]){  \n"
                        + "                                 //swap elements  \n"
                        + "                                 temp = arr[j-1];  \n"
                        + "                                 arr[j-1] = arr[j];  \n"
                        + "                                 arr[j] = temp;  \n"
                        + "                         }  \n"
                        + "                          \n"
                        + "                 }  \n"
                        + "         }  \n"
                        + "  \n"
                        + "    }  ");
                break;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {

                if ("Nimbus".equals(info.getName())) {

                    javax.swing.UIManager.setLookAndFeel(info.getClassName());

                    break;
                }
            }
        } catch (ClassNotFoundException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {

            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                try {

                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

                } catch (ClassNotFoundException e) {

                    e.printStackTrace();

                } catch (InstantiationException e) {

                    e.printStackTrace();

                } catch (IllegalAccessException e) {

                    e.printStackTrace();

                } catch (UnsupportedLookAndFeelException e) {

                    e.printStackTrace();

                }

                new main().setVisible(true);

            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonExecuting;
    private javax.swing.JButton jButtonLoadingFile;
    private javax.swing.JButton jButtonRandomize;
    private javax.swing.JButton jButtonSettingValue;
    private javax.swing.JComboBox jComboBoxAlgorithm;
    private javax.swing.JComboBox jComboBoxQuantity;
    private javax.swing.JLabel jLabelAlgorithmName;
    private javax.swing.JLabel jLabelAverage;
    private javax.swing.JLabel jLabelBestCase;
    private javax.swing.JLabel jLabelWorstCase;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelCode;
    private javax.swing.JRadioButton jRadioButtonAscending;
    private javax.swing.JRadioButton jRadioButtonDescending;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSliderSpeed;
    private javax.swing.JTextArea jTextAreaCode;
    private javax.swing.JTextArea jTextAreaData;
    // End of variables declaration//GEN-END:variables
}
